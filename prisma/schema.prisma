generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId          Int       @id @default(autoincrement()) @map("user_id")
  email           String    @unique @map("email")
  password        String    @map("password")
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // 이 아래 columns은 생성되지 않는다. relation에 대한 정보만 정의해 준다.
  UserInfos       UserInfos? // 1:1 relation. ? 는 UserInfos가 존재하지 않을 수도 있음을 의미.
  Resumes         Resumes[] // 1:N relation. [] 는 여러 개의 Posts와 연관 관계를 가질 수 있음을 의미.
  ResumeLogs      ResumeLogs[]
  RefreshTokens   RefreshTokens[]

  @@map("users")
}

model UserInfos {
  userInfoId      Int             @id @default(autoincrement()) @map("user_info_id")
  UserId          Int             @unique @map("user_id")
  name            String          @map("name")
  role            Role            @default(APPLICANT) @map("role")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")

  User            Users           @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  @@map("user_infos")
}

enum Role {
  APPLICANT
  RECRUITER
}

model Resumes {
  resumeId            Int                 @id @default(autoincrement()) @map("resume_id")
  UserId              Int                 @map("user_id")
  title               String              @map("title")
  personalStatement   String              @db.Text @map("personal_statement")
  applicationStatus   ApplicationStatus   @default(APPLY) @map("application_status")
  createdAt           DateTime            @default(now()) @map("created_at")
  updatedAt           DateTime            @updatedAt @map("updated_at")

  User                Users               @relation(fields: [UserId], references: [userId], onDelete: Cascade)
  ResumeLogs          ResumeLogs[]

  @@map("resumes")
}

enum ApplicationStatus {
  APPLY
  DROP
  PASS
  INTERVIEW1
  INTERVIEW2
  FINAL_PASS
}

model ResumeLogs {
  resumeLogId     String              @id @default(uuid()) @map("resume_log_id")
  ResumeId        Int                 @map("resume_id")
  RecruiterId     Int                 @map("recruiter_id")
  prevStatus      ApplicationStatus   @map("prev_status")
  currStatus      ApplicationStatus   @map("curr_status")
  reason          String              @db.Text @map("reason")
  changedAt       DateTime            @default(now()) @map("changed_at")

  Resume        Resumes     @relation(fields: [ResumeId], references: [resumeId], onDelete: Cascade)
  Recruiter     Users       @relation(fields: [RecruiterId], references: [userId], onDelete: Cascade)

  @@map("resume_logs")
}

model RefreshTokens {
  tokenId       String        @id @map("token_id")
  UserId        Int           @unique @map("user_id")
  ip            String        @map("ip")
  userAgent     String        @map("user_agent")
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @updatedAt  @map("updated_at")

  User          Users         @relation(fields: [UserId], references: [userId], onDelete: Cascade)

  @@map("refresh_tokens")
}